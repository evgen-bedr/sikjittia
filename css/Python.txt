.endswith(suffix[, start[, end]]): Возвращает True, если строка заканчивается на suffix.
.find(sub[, start[, end]]): Возвращает наименьший индекс в строке, где найдена подстрока sub, или -1.
.format(*args, **kwargs): Форматирует строку.
.index(sub[, start[, end]]): Возвращает наименьший индекс в строке, где найдена подстрока sub, или вызывает ValueError.
.isalnum(): Возвращает True, если строка состоит из букв и цифр и не пуста.
.isalpha(): Возвращает True, если строка состоит только из букв и не пуста.
.isdecimal(): Возвращает True, если строка состоит только из десятичных чисел и не пуста.
.isdigit(): Возвращает True, если строка состоит только из цифр и не пуста.
.isidentifier(): Возвращает True, если строка является допустимым идентификатором Python.
.islower(): Возвращает True, если все буквы в строке в нижнем регистре и строка содержит хотя бы одну букву.
.isnumeric(): Возвращает True, если строка состоит только из числовых символов и не пуста.
.isprintable(): Возвращает True, если строка печатаема или пуста.
.isspace(): Возвращает True, если строка содержит только пробельные символы и не пуста.
.istitle(): Возвращает True, если строка следует правилам заголовков (каждое слово начинается с заглавной буквы).
.isupper(): Возвращает True, если все буквы в строке в верхнем регистре и строка содержит хотя бы одну букву.
.join(iterable): Объединяет элементы итерируемого объекта в одну строку, разделённую строкой, к которой применяется метод.
.ljust(width[, fillchar]): Возвращает строку, выровненную по левому краю в поле заданной ширины.
.lower(): Преобразует все буквы в строке в нижний регистр.
.lstrip([chars]): Удаляет начальные символы (пробелы по умолчанию) из строки.
.partition(sep): Разбивает строку на кортеж из трех элементов: до sep, sep и после sep.
.replace(old, new[, count]): Заменяет вхождения подстроки old на new в строке.
.rfind(sub[, start[, end]]): Возвращает наибольший индекс в строке, где найдена подстрока sub, или -1.
.rindex(sub[, start[, end]]): Аналогично rfind, но вызывает ValueError, если подстрока не найдена.
.rjust(width[, fillchar]): Возвращает строку, выровненную по правому краю в поле заданной ширины.
.rpartition(sep): Аналогично partition, но ищет sep с конца строки.
.rstrip([chars]): Удаляет конечные символы (пробелы по умолчанию) из строки.
.split(sep=None, maxsplit=-1): Разбивает строку на список подстрок по sep.
.splitlines([keepends]): Разбивает строку на список строк по символам новой строки.
.startswith(prefix[, start[, end]]): Возвращает True, если строка начинается с prefix.
.strip([chars]): Удаляет начальные и конечные символы (пробелы по умолчанию) из строки.
.swapcase(): Преобразует прописные буквы в строчные и наоборот в строке.
.title(): Преобразует первую букву каждого слова в верхний регистр и остальные буквы в нижний регистр.
.upper(): Преобразует все буквы в строке в верхний регистр.
.zfill(width): Дополняет строку ведущими нулями до заданной ширины width.


.count("a"): Считает количество вхождений "a" в строке.
.capitalize(): Преобразует первую букву строки в верхний регистр.
.center(10, "-"): Центрирует строку, заполняя "-" до длины 10.
.casefold(): Преобразует строку для сравнения без учета регистра.

.encode("utf-8"): Кодирует строку в байты используя UTF-8.
.endswith(".txt"): True, если строка заканчивается на ".txt".

.find(sub, start=0, end=len(text)): Индекс первого вхождения "sub" или -1. в диапазоне от start до end.
.format(name="World"): Форматирует строку, заменяя плейсхолдеры значениями.
.format_map({"name": "World"}): Аналогично format, но использует словарь.

.isdigit(): True, если строка содержит только цифры.
.isalpha(): True, если все символы алфавитные.
.islower(): True, если все символы в нижнем регистре.
.isupper(): True, если все символы в верхнем регистре.
.isnumeric(): True, если строка содержит только числовые символы.
.isdecimal(): True, если строка содержит только десятичные числа.
.isspace(): True, если строка содержит только пробелы.
.isalnum(): True, если строка содержит только буквы и цифры.
.isidentifier(): True, если строка является допустимым идентификатором.
.isprintable(): True, если все символы печатаемы.
.isinstance(object, classinfo): Возвращает True oder False. print(isinstance(z, (list, tuple)))  # Выведет True, так как z является list, который входит в кортеж

",".join(["a", "b", "c"]): Объединяет элементы списка в строку, разделенную ",".

.lower(): Преобразует строку в нижний регистр.
.lstrip("-"): Удаляет начальные "-" из строки.
.ljust(10): Выравнивает строку по левому краю.
.ljust(10, "-"): Выравнивает строку по левому краю, заполняя "-" до длины 10.

.partition("sep"): Разбивает строку по первому вхождению "sep".

.replace("old", "new"): Заменяет "old" на "new".
.remove(x): Удаляет первое вхождение элемента x из списка. Если элемент не найден, возникает ошибка ValueError.
.rfind("sub"): Индекс последнего вхождения "sub" или -1.
.rindex("sub"): Подобно rfind, но вызывает ValueError, если "sub" не найден.
.rsplit(",", 1): Аналогично split, но разбивка идет с конца строки.
.rstrip([chars]): Удаляет указанные символы с конца строки.
.rpartition("sep"): Разбивает строку по последнему вхождению "sep".
.rjust(10, "-"): Выравнивает строку по правому краю, заполняя "-" до длины 10.

.strip("-"): Удаляет начальные и конечные "-" из строки.
.split(",", 1): Разбивает строку по ",", максимум 1 раз.
.split(","): Разбивает строку по разделителю ",".
.swapcase(): Инвертирует регистр всех букв в строке.
.splitlines(): Разбивает строку по символам новой строки.
.startswith("Hello"): True, если строка начинается с "Hello".

.title(): Преобразует первые буквы слов в верхний регистр.
.translate(str.maketrans("a", "b")): Заменяет все "a" на "b".

.upper(): Преобразует строку в верхний регистр.

.zfill(5): Дополняет строку ведущими нулями до длины 5.

enumerate(iterable, start=0 (не обязательно)) for index, fruit in enumerate(fruits):  возвращает индекс и значение fruits = ['apple', 'banana', 'cherry']

zip() генерирует кортежи
numbers = [1, 2, 3]
letters = ['a', 'b', 'c']
zipped = zip(numbers, letters)
print(list(zipped))
[(1, 'a'), (2, 'b'), (3, 'c')]


isinstance(object, classinfo) проверяет, принадлежит ли объект к определенному классу или кортежу классов. Она возвращает True,
если объект является экземпляром указанного класса или одного из классов в кортеже, и False в противном случае. 


x = 5
print(isinstance(x, int))  # Выведет: True, потому что x - это целое число.

z = [1, 2, 3]
print(isinstance(z, list))  # Выведет: True, потому что z - это список.

print(isinstance(z, (list, tuple)))  # Выведет: True, т.к. z - это список, а проверка идет на принадлежность к типам списка или кортежа.
numbers = [1, 2, 3, 4, 5]
print(all(n > 0 for n in numbers))  # Вывод: True












